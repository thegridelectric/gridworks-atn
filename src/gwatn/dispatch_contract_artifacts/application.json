{
  "hints": {
    "heartbeat_algo_audit": {
      "structs": {
        "heartbeat": {
          "name": "HeartbeatB",
          "elements": [
            ["FromGNodeAlias", "string"],
            ["FromGNodeInstanceId", "string"],
            ["MyHex", "string"],
            ["YourLastHex", "string"],
            ["LastReceivedTimeUnixMs", "uint64"],
            ["SendTimeUnixMs", "uint64"],
            ["TypeName", "string"],
            ["Version", "string"]
          ]
        }
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4NzQ2MTVmNjE2YzY5NjE3MyAweDE1MWY3Yzc1IDB4NjcgMHg3MzYzNjE2NDYxNWY2MzY1NzI3NDVmNjk2NDc4IDB4NzQ2MTVmNzQ3MjYxNjQ2OTZlNjc1ZjcyNjk2NzY4NzQ3MzVmNjk2NDc4CnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2wxMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDAyYmVjZTExIC8vICJoZWxsbyhzdHJpbmcpc3RyaW5nIgo9PQpibnogbWFpbl9sMTEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhiMTI4Mzg1NyAvLyAiYm9vdHN0cmFwMShwYXksYXNzZXQpc3RyaW5nIgo9PQpibnogbWFpbl9sMTAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhjYzIzMWRiZSAvLyAiYm9vdHN0cmFwMihwYXksYXNzZXQpc3RyaW5nIgo9PQpibnogbWFpbl9sOQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDFlOWRhYTBkIC8vICJnZXRfdGFfYWxpYXMoKXN0cmluZyIKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4YmI5NzU5MyAvLyAiaGVhcnRiZWF0X2FsZ29fYXVkaXQocGF5LChzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCxzdHJpbmcsc3RyaW5nKSlzdHJpbmciCj09CmJueiBtYWluX2w3CmVycgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCnN0b3JlIDM4CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0Kc3RvcmUgMzcKbG9hZCAzNwpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApsb2FkIDM3CmxvYWQgMzgKY2FsbHN1YiBoZWFydGJlYXRhbGdvYXVkaXRfOApzdG9yZSAzOQpieXRlY18xIC8vIDB4MTUxZjdjNzUKbG9hZCAzOQpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGdldHRhYWxpYXNfNwpzdG9yZSAzNQpieXRlY18xIC8vIDB4MTUxZjdjNzUKbG9hZCAzNQpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w5Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCmdldGJ5dGUKc3RvcmUgMjIKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpzdG9yZSAyMQpsb2FkIDIxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmxvYWQgMjEKbG9hZCAyMgpjYWxsc3ViIGJvb3RzdHJhcDJfNgpzdG9yZSAyMwpieXRlY18xIC8vIDB4MTUxZjdjNzUKbG9hZCAyMwpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCnN0b3JlIDYKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpzdG9yZSA1CmxvYWQgNQpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApsb2FkIDUKbG9hZCA2CmNhbGxzdWIgYm9vdHN0cmFwMV81CnN0b3JlIDcKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CmxvYWQgNwpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpjYWxsc3ViIGhlbGxvXzQKc3RvcmUgMgpieXRlY18xIC8vIDB4MTUxZjdjNzUKbG9hZCAyCmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEyOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxNgp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBPcHRJbgo9PQpibnogbWFpbl9sMTUKZXJyCm1haW5fbDE1Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBvcHRpbl8yCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmNhbGxzdWIgY3JlYXRlXzEKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBhdXRoX29ubHkKYXV0aG9ubHlfMDoKYnl0ZWNfMiAvLyAiZyIKYXBwX2dsb2JhbF9nZXQKPT0KcmV0c3ViCgovLyBjcmVhdGUKY3JlYXRlXzE6CmludGNfMCAvLyAwCmJ5dGVjXzIgLy8gImciCmFwcF9nbG9iYWxfZ2V0X2V4CnN0b3JlIDEKc3RvcmUgMApsb2FkIDEKIQphc3NlcnQKYnl0ZWNfMiAvLyAiZyIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gb3B0X2luCm9wdGluXzI6CnJldHN1YgoKLy8gYXV0aF9vcHRlZF9pbgphdXRob3B0ZWRpbl8zOgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKYXBwX29wdGVkX2luCnJldHN1YgoKLy8gaGVsbG8KaGVsbG9fNDoKc3RvcmUgMwpwdXNoYnl0ZXMgMHg0ODY1NmM2YzZmMmMyMCAvLyAiSGVsbG8sICIKbG9hZCAzCmV4dHJhY3QgMiAwCmNvbmNhdApzdG9yZSA0CmxvYWQgNApsZW4KaXRvYgpleHRyYWN0IDYgMApsb2FkIDQKY29uY2F0CnN0b3JlIDQKbG9hZCA0CnJldHN1YgoKLy8gYm9vdHN0cmFwMQpib290c3RyYXAxXzU6CnN0b3JlIDkKc3RvcmUgOAp0eG4gU2VuZGVyCmNhbGxzdWIgYXV0aG9ubHlfMAovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmxvYWQgOApndHhucyBSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwo9PQovLyByZWNlaXZlciBub3QgYXBwIGFkZHJlc3MKYXNzZXJ0CmxvYWQgOApndHhucyBBbW91bnQKcHVzaGludCAxMDAwMDAwMCAvLyAxMDAwMDAwMAo+PQovLyBhbW91bnQgbWluaW11bSBub3QgbWV0CmFzc2VydApsb2FkIDkKdHhuYXMgQXNzZXRzCmFzc2V0X3BhcmFtc19nZXQgQXNzZXRVbml0TmFtZQpzdG9yZSAxMgpzdG9yZSAxMQpsb2FkIDEyCmFzc2VydApsb2FkIDExCnB1c2hieXRlcyAweDUzNDM0MTQ0NDEgLy8gIlNDQURBIgo9PQovLyBVbml0TmFtZSBub3QgU0NBREEKYXNzZXJ0CmxvYWQgOQp0eG5hcyBBc3NldHMKYXNzZXRfcGFyYW1zX2dldCBBc3NldE5hbWUKc3RvcmUgMTQKc3RvcmUgMTMKbG9hZCAxNAphc3NlcnQKbG9hZCA4Cmd0eG5zIFNlbmRlcgpsb2FkIDkKdHhuYXMgQXNzZXRzCmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSAxNgpzdG9yZSAxNQpsb2FkIDE2CmFzc2VydApsb2FkIDE1CmludGNfMSAvLyAxCj09Ci8vIGNyZWF0b3IgZG9lcyBub3Qgb3duIGEgU2NhZGFDZXJ0CmFzc2VydAppbnRjXzAgLy8gMApieXRlY18zIC8vICJzY2FkYV9jZXJ0X2lkeCIKYXBwX2dsb2JhbF9nZXRfZXgKc3RvcmUgMTgKc3RvcmUgMTcKbG9hZCAxOAohCmFzc2VydApieXRlY18zIC8vICJzY2FkYV9jZXJ0X2lkeCIKbG9hZCA5CnR4bmFzIEFzc2V0cwphcHBfZ2xvYmFsX3B1dAppbnRjXzAgLy8gMApieXRlY18wIC8vICJ0YV9hbGlhcyIKYXBwX2dsb2JhbF9nZXRfZXgKc3RvcmUgMjAKc3RvcmUgMTkKbG9hZCAyMAohCmFzc2VydApieXRlY18wIC8vICJ0YV9hbGlhcyIKbG9hZCAxMwphcHBfZ2xvYmFsX3B1dApsb2FkIDEzCnN0b3JlIDEwCmxvYWQgMTAKbGVuCml0b2IKZXh0cmFjdCA2IDAKbG9hZCAxMApjb25jYXQKc3RvcmUgMTAKbG9hZCAxMApyZXRzdWIKCi8vIGJvb3RzdHJhcDIKYm9vdHN0cmFwMl82OgpzdG9yZSAyNQpzdG9yZSAyNApsb2FkIDI0Cmd0eG5zIFJlY2VpdmVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCj09Ci8vIHJlY2VpdmVyIG5vdCBhcHAgYWRkcmVzcwphc3NlcnQKbG9hZCAyNQp0eG5hcyBBc3NldHMKYXNzZXRfcGFyYW1zX2dldCBBc3NldFVuaXROYW1lCnN0b3JlIDI4CnN0b3JlIDI3CmxvYWQgMjgKYXNzZXJ0CmxvYWQgMjcKcHVzaGJ5dGVzIDB4NTQ0MTU0NTI0MTQ0NDUgLy8gIlRBVFJBREUiCj09Ci8vIFVuaXROYW1lIG5vdCBUQVRSQURFCmFzc2VydApsb2FkIDI1CnR4bmFzIEFzc2V0cwphc3NldF9wYXJhbXNfZ2V0IEFzc2V0TmFtZQpzdG9yZSAzMApzdG9yZSAyOQpsb2FkIDMwCmFzc2VydApieXRlY18wIC8vICJ0YV9hbGlhcyIKYXBwX2dsb2JhbF9nZXQKbG9hZCAyOQo9PQphc3NlcnQKbG9hZCAyNApndHhucyBTZW5kZXIKbG9hZCAyNQp0eG5hcyBBc3NldHMKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDMyCnN0b3JlIDMxCmxvYWQgMzIKLy8gQXRuIGRvZXMgbm90IG93biB0aGUgY29ycmVjdCBUYVRyYWRpbmdSaWdodHMKYXNzZXJ0CmxvYWQgMzEKaW50Y18xIC8vIDEKPT0KLy8gQXRuIGRvZXMgbm90IG93biB0aGUgY29ycmVjdCBUYVRyYWRpbmdSaWdodHMKYXNzZXJ0CmludGNfMCAvLyAwCmJ5dGVjIDQgLy8gInRhX3RyYWRpbmdfcmlnaHRzX2lkeCIKYXBwX2dsb2JhbF9nZXRfZXgKc3RvcmUgMzQKc3RvcmUgMzMKbG9hZCAzNAohCmFzc2VydApieXRlYyA0IC8vICJ0YV90cmFkaW5nX3JpZ2h0c19pZHgiCmxvYWQgMjUKdHhuYXMgQXNzZXRzCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzAgLy8gInRhX2FsaWFzIgphcHBfZ2xvYmFsX2dldApzdG9yZSAyNgpsb2FkIDI2CmxlbgppdG9iCmV4dHJhY3QgNiAwCmxvYWQgMjYKY29uY2F0CnN0b3JlIDI2CmxvYWQgMjYKcmV0c3ViCgovLyBnZXRfdGFfYWxpYXMKZ2V0dGFhbGlhc183OgpieXRlY18wIC8vICJ0YV9hbGlhcyIKYXBwX2dsb2JhbF9nZXQKc3RvcmUgMzYKbG9hZCAzNgpsZW4KaXRvYgpleHRyYWN0IDYgMApsb2FkIDM2CmNvbmNhdApzdG9yZSAzNgpsb2FkIDM2CnJldHN1YgoKLy8gaGVhcnRiZWF0X2FsZ29fYXVkaXQKaGVhcnRiZWF0YWxnb2F1ZGl0Xzg6CnN0b3JlIDQxCnN0b3JlIDQwCnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob3B0ZWRpbl8zCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMCAvLyAidGFfYWxpYXMiCmFwcF9nbG9iYWxfZ2V0CnN0b3JlIDQyCmxvYWQgNDIKbGVuCml0b2IKZXh0cmFjdCA2IDAKbG9hZCA0Mgpjb25jYXQKc3RvcmUgNDIKbG9hZCA0MgpyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g",
          "descr": "The governor of this contract"
        },
        "ta_alias": {
          "type": "bytes",
          "key": "ta_alias",
          "descr": "TerminalAsset GNodeAlias"
        },
        "scada_cert_idx": {
          "type": "uint64",
          "key": "scada_cert_idx",
          "descr": "The asset id of the Scada Cert ASA"
        },
        "ta_trading_rights_idx": {
          "type": "uint64",
          "key": "ta_trading_rights_idx",
          "descr": "The asset id of the TaTradingRights ASA"
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "DispatchContract",
    "methods": [
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name",
            "desc": "a string"
          }
        ],
        "returns": {
          "type": "string",
          "desc": "Hello, name"
        },
        "desc": "This is in one of the intro beaker vignettes from their\ngreat set of examples.\nhttps://github.com/algorand-devrel/beaker/blob/master/examples/simple/hello.py#L8"
      },
      {
        "name": "bootstrap1",
        "args": [
          {
            "type": "pay",
            "name": "scada_seed"
          },
          {
            "type": "asset",
            "name": "ScadaCert"
          }
        ],
        "returns": {
          "type": "string"
        },
        "desc": "First half of the bootstrap. Checks that\n- ScadaCert is valid    - payment sender (also the governor) owns the ScadaCert, thus proving their    identity as Scada\nIf these checks pass, then the global scada_addr and ta_alias are set.\nArgs:     scada_seed: Initial Payment transaction to the app, by Scada Acct     ScadaCert: The asset owned by the Scada Addr validating that the GNodeFactory     authorized its GNode as a SCADA.\nReturns:     The TerminalAssetAlias (from the ScadaCert)"
      },
      {
        "name": "bootstrap2",
        "args": [
          {
            "type": "pay",
            "name": "atn_seed"
          },
          {
            "type": "asset",
            "name": "TaTradingRights"
          }
        ],
        "returns": {
          "type": "string"
        },
        "desc": "\"Second half of the bootstrap, done by Atn calling this method. Method checks that\n- TaTradingRights are valid, and match the global    ta_alias (which must already exist)    - Atn payment meets the MinimumBalance requirements of the DispatchContract    - payment sender owns the TaTradingRights, thus proving their    identity as AtomicTNode\nhttps://gridworks.readthedocs.io/en/latest/ta-trading-rights.html     If these checks pass, then the global atn_addr is set.\nArgs:     atn_seed: Initial Payment transaction to the app from Atn. This pays for boxes.     TaTradingRights: The asset owned by the Atn Addr validating is right to trade     energy on behalf of the TerminalAsset\nReturns:     The TerminalAssetAlias"
      },
      {
        "name": "get_ta_alias",
        "args": [],
        "returns": {
          "type": "string",
          "desc": "TerminalAsset GNodeAlias"
        },
        "desc": "Returns the GNodeAlias of the TerminalAsset for the Dispatch Contract.\nhttps://gridworks.readthedocs.io/en/latest/g-node-alias.html https://gridworks.readthedocs.io/en/latest/terminal-asset.html"
      },
      {
        "name": "heartbeat_algo_audit",
        "args": [
          {
            "type": "pay",
            "name": "signed_proof",
            "desc": "Tiny signed payment to DispatchContract to prove identity"
          },
          {
            "type": "(string,string,string,string,uint64,uint64,string,string)",
            "name": "heartbeat",
            "desc": "Heartbeat sender last sent to its partner"
          }
        ],
        "returns": {
          "type": "string"
        },
        "desc": "What: Algo payload with report of last HeartbeatB sent to partner via Rabbit, to be sent to\nDispatchContract on Algo blockchain\nWhy: After validating the identity of the sender by inspecting the signed_proof, the DispatchContract shortens up the heartbeat info into the more compact form of HeartbeatStorageData, and stores in a box. Two hours of the most recent minutely heartbeats are stored, using one box for recent Atn heartbeats and one box for recent Scada heartbeats.\nSee https://gridworks-atn.readthedocs.io/en/latest/apis/types.html#heartbeatalgoaudit"
      }
    ],
    "networks": {},
    "desc": "The DispatchContract between an AtomicTNode-Scada pair that is coordinating\n    the control of their shared TerminalAsset.\n\n    https://gridworks.readthedocs.io/en/latest/dispatch-contract.html\n    "
  }
}
