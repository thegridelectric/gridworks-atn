#pragma version 8
intcblock 0 1
bytecblock 0x74615f616c696173 0x151f7c75 0x67 0x73636164615f636572745f696478 0x74615f74726164696e675f7269676874735f696478
txn NumAppArgs
intc_0 // 0
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x02bece11 // "hello(string)string"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0xb1283857 // "bootstrap1(pay,asset)string"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0xcc231dbe // "bootstrap2(pay,asset)string"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x1e9daa0d // "get_ta_alias()string"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x8bb97593 // "heartbeat_algo_audit(pay,(string,string,string,string,uint64,uint64,string,string))string"
==
bnz main_l7
err
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
store 38
txn GroupIndex
intc_1 // 1
-
store 37
load 37
gtxns TypeEnum
intc_1 // pay
==
assert
load 37
load 38
callsub heartbeatalgoaudit_8
store 39
bytec_1 // 0x151f7c75
load 39
concat
log
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub gettaalias_7
store 35
bytec_1 // 0x151f7c75
load 35
concat
log
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 22
txn GroupIndex
intc_1 // 1
-
store 21
load 21
gtxns TypeEnum
intc_1 // pay
==
assert
load 21
load 22
callsub bootstrap2_6
store 23
bytec_1 // 0x151f7c75
load 23
concat
log
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 6
txn GroupIndex
intc_1 // 1
-
store 5
load 5
gtxns TypeEnum
intc_1 // pay
==
assert
load 5
load 6
callsub bootstrap1_5
store 7
bytec_1 // 0x151f7c75
load 7
concat
log
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub hello_4
store 2
bytec_1 // 0x151f7c75
load 2
concat
log
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l16
txn OnCompletion
intc_1 // OptIn
==
bnz main_l15
err
main_l15:
txn ApplicationID
intc_0 // 0
!=
assert
callsub optin_2
intc_1 // 1
return
main_l16:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_1
intc_1 // 1
return

// auth_only
authonly_0:
bytec_2 // "g"
app_global_get
==
retsub

// create
create_1:
intc_0 // 0
bytec_2 // "g"
app_global_get_ex
store 1
store 0
load 1
!
assert
bytec_2 // "g"
global CreatorAddress
app_global_put
retsub

// opt_in
optin_2:
retsub

// auth_opted_in
authoptedin_3:
global CurrentApplicationID
app_opted_in
retsub

// hello
hello_4:
store 3
pushbytes 0x48656c6c6f2c20 // "Hello, "
load 3
extract 2 0
concat
store 4
load 4
len
itob
extract 6 0
load 4
concat
store 4
load 4
retsub

// bootstrap1
bootstrap1_5:
store 9
store 8
txn Sender
callsub authonly_0
// unauthorized
assert
load 8
gtxns Receiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 8
gtxns Amount
pushint 10000000 // 10000000
>=
// amount minimum not met
assert
load 9
txnas Assets
asset_params_get AssetUnitName
store 12
store 11
load 12
assert
load 11
pushbytes 0x5343414441 // "SCADA"
==
// UnitName not SCADA
assert
load 9
txnas Assets
asset_params_get AssetName
store 14
store 13
load 14
assert
load 8
gtxns Sender
load 9
txnas Assets
asset_holding_get AssetBalance
store 16
store 15
load 16
assert
load 15
intc_1 // 1
==
// creator does not own a ScadaCert
assert
intc_0 // 0
bytec_3 // "scada_cert_idx"
app_global_get_ex
store 18
store 17
load 18
!
assert
bytec_3 // "scada_cert_idx"
load 9
txnas Assets
app_global_put
intc_0 // 0
bytec_0 // "ta_alias"
app_global_get_ex
store 20
store 19
load 20
!
assert
bytec_0 // "ta_alias"
load 13
app_global_put
load 13
store 10
load 10
len
itob
extract 6 0
load 10
concat
store 10
load 10
retsub

// bootstrap2
bootstrap2_6:
store 25
store 24
load 24
gtxns Receiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 25
txnas Assets
asset_params_get AssetUnitName
store 28
store 27
load 28
assert
load 27
pushbytes 0x54415452414445 // "TATRADE"
==
// UnitName not TATRADE
assert
load 25
txnas Assets
asset_params_get AssetName
store 30
store 29
load 30
assert
bytec_0 // "ta_alias"
app_global_get
load 29
==
assert
load 24
gtxns Sender
load 25
txnas Assets
asset_holding_get AssetBalance
store 32
store 31
load 32
// Atn does not own the correct TaTradingRights
assert
load 31
intc_1 // 1
==
// Atn does not own the correct TaTradingRights
assert
intc_0 // 0
bytec 4 // "ta_trading_rights_idx"
app_global_get_ex
store 34
store 33
load 34
!
assert
bytec 4 // "ta_trading_rights_idx"
load 25
txnas Assets
app_global_put
bytec_0 // "ta_alias"
app_global_get
store 26
load 26
len
itob
extract 6 0
load 26
concat
store 26
load 26
retsub

// get_ta_alias
gettaalias_7:
bytec_0 // "ta_alias"
app_global_get
store 36
load 36
len
itob
extract 6 0
load 36
concat
store 36
load 36
retsub

// heartbeat_algo_audit
heartbeatalgoaudit_8:
store 41
store 40
txn Sender
callsub authoptedin_3
// unauthorized
assert
bytec_0 // "ta_alias"
app_global_get
store 42
load 42
len
itob
extract 6 0
load 42
concat
store 42
load 42
retsub
